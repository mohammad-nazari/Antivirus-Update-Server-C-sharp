/* soapH.h
   Generated by gSOAP 2.8.17r from /mnt/hgfs/APA/Projects/New Project/Update/Server/C++/Update/source.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (10)
#endif

#define soap_default_xsd__int(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__int(soap, data),0) || soap_put_xsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (12)
#endif

#define soap_default_xsd__double(soap, a) soap_default_double(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__double(soap, data),0) || soap_put_xsd__double(soap, data, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns1__UpdateResponse
#define SOAP_TYPE_ns1__UpdateResponse (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateResponse(struct soap*, const char*, int, const ns1__UpdateResponse *, const char*);
SOAP_FMAC3 ns1__UpdateResponse * SOAP_FMAC4 soap_in_ns1__UpdateResponse(struct soap*, const char*, ns1__UpdateResponse *, const char*);

#ifndef soap_write_ns1__UpdateResponse
#define soap_write_ns1__UpdateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UpdateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__UpdateResponse * SOAP_FMAC4 soap_get_ns1__UpdateResponse(struct soap*, ns1__UpdateResponse *, const char*, const char*);

#ifndef soap_read_ns1__UpdateResponse
#define soap_read_ns1__UpdateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__UpdateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__UpdateResponse * SOAP_FMAC2 soap_instantiate_ns1__UpdateResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateResponse * soap_new_ns1__UpdateResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__UpdateResponse(soap, n, NULL, NULL, NULL); }

inline ns1__UpdateResponse * soap_new_req_ns1__UpdateResponse(struct soap *soap, std::string& FileContent, ns1__ErrorInfo& Error) { ns1__UpdateResponse *_p = soap_instantiate_ns1__UpdateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__UpdateResponse::FileContent = FileContent; _p->ns1__UpdateResponse::Error = Error; } return _p; }

inline ns1__UpdateResponse * soap_new_set_ns1__UpdateResponse(struct soap *soap, std::string& FileContent, ns1__ErrorInfo& Error) { ns1__UpdateResponse *_p = soap_instantiate_ns1__UpdateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__UpdateResponse::FileContent = FileContent; _p->ns1__UpdateResponse::Error = Error; } return _p; }

inline void soap_delete_ns1__UpdateResponse(struct soap *soap, ns1__UpdateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UpdateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__UpdateFilesList
#define SOAP_TYPE_ns1__UpdateFilesList (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateFilesList(struct soap*, const char*, int, const ns1__UpdateFilesList *, const char*);
SOAP_FMAC3 ns1__UpdateFilesList * SOAP_FMAC4 soap_in_ns1__UpdateFilesList(struct soap*, const char*, ns1__UpdateFilesList *, const char*);

#ifndef soap_write_ns1__UpdateFilesList
#define soap_write_ns1__UpdateFilesList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UpdateFilesList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__UpdateFilesList * SOAP_FMAC4 soap_get_ns1__UpdateFilesList(struct soap*, ns1__UpdateFilesList *, const char*, const char*);

#ifndef soap_read_ns1__UpdateFilesList
#define soap_read_ns1__UpdateFilesList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__UpdateFilesList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__UpdateFilesList * SOAP_FMAC2 soap_instantiate_ns1__UpdateFilesList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateFilesList * soap_new_ns1__UpdateFilesList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__UpdateFilesList(soap, n, NULL, NULL, NULL); }

inline ns1__UpdateFilesList * soap_new_req_ns1__UpdateFilesList(struct soap *soap, ns1__ErrorInfo& Error) { ns1__UpdateFilesList *_p = soap_instantiate_ns1__UpdateFilesList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__UpdateFilesList::Error = Error; } return _p; }

inline ns1__UpdateFilesList * soap_new_set_ns1__UpdateFilesList(struct soap *soap, std::vector<ns1__FileInfo >& FilesList, ns1__ErrorInfo& Error) { ns1__UpdateFilesList *_p = soap_instantiate_ns1__UpdateFilesList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__UpdateFilesList::FilesList = FilesList; _p->ns1__UpdateFilesList::Error = Error; } return _p; }

inline void soap_delete_ns1__UpdateFilesList(struct soap *soap, ns1__UpdateFilesList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UpdateFilesList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__UpdateArguments
#define SOAP_TYPE_ns1__UpdateArguments (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UpdateArguments(struct soap*, const char*, int, const ns1__UpdateArguments *, const char*);
SOAP_FMAC3 ns1__UpdateArguments * SOAP_FMAC4 soap_in_ns1__UpdateArguments(struct soap*, const char*, ns1__UpdateArguments *, const char*);

#ifndef soap_write_ns1__UpdateArguments
#define soap_write_ns1__UpdateArguments(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UpdateArguments", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__UpdateArguments * SOAP_FMAC4 soap_get_ns1__UpdateArguments(struct soap*, ns1__UpdateArguments *, const char*, const char*);

#ifndef soap_read_ns1__UpdateArguments
#define soap_read_ns1__UpdateArguments(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__UpdateArguments(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__UpdateArguments * SOAP_FMAC2 soap_instantiate_ns1__UpdateArguments(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UpdateArguments * soap_new_ns1__UpdateArguments(struct soap *soap, int n = -1) { return soap_instantiate_ns1__UpdateArguments(soap, n, NULL, NULL, NULL); }

inline ns1__UpdateArguments * soap_new_req_ns1__UpdateArguments(struct soap *soap, std::string& SessionCode, std::string& UserKey, std::string& HardSerial, std::string& PreMasterKey, ns1__FileInfo& FilesList, ns1__ErrorInfo& Error) { ns1__UpdateArguments *_p = soap_instantiate_ns1__UpdateArguments(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__UpdateArguments::SessionCode = SessionCode; _p->ns1__UpdateArguments::UserKey = UserKey; _p->ns1__UpdateArguments::HardSerial = HardSerial; _p->ns1__UpdateArguments::PreMasterKey = PreMasterKey; _p->ns1__UpdateArguments::FilesList = FilesList; _p->ns1__UpdateArguments::Error = Error; } return _p; }

inline ns1__UpdateArguments * soap_new_set_ns1__UpdateArguments(struct soap *soap, std::string& SessionCode, std::string& UserKey, std::string& HardSerial, std::string& PreMasterKey, ns1__FileInfo& FilesList, ns1__ErrorInfo& Error) { ns1__UpdateArguments *_p = soap_instantiate_ns1__UpdateArguments(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__UpdateArguments::SessionCode = SessionCode; _p->ns1__UpdateArguments::UserKey = UserKey; _p->ns1__UpdateArguments::HardSerial = HardSerial; _p->ns1__UpdateArguments::PreMasterKey = PreMasterKey; _p->ns1__UpdateArguments::FilesList = FilesList; _p->ns1__UpdateArguments::Error = Error; } return _p; }

inline void soap_delete_ns1__UpdateArguments(struct soap *soap, ns1__UpdateArguments *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__UpdateArguments(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SessionInfo
#define SOAP_TYPE_ns1__SessionInfo (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SessionInfo(struct soap*, const char*, int, const ns1__SessionInfo *, const char*);
SOAP_FMAC3 ns1__SessionInfo * SOAP_FMAC4 soap_in_ns1__SessionInfo(struct soap*, const char*, ns1__SessionInfo *, const char*);

#ifndef soap_write_ns1__SessionInfo
#define soap_write_ns1__SessionInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:SessionInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SessionInfo * SOAP_FMAC4 soap_get_ns1__SessionInfo(struct soap*, ns1__SessionInfo *, const char*, const char*);

#ifndef soap_read_ns1__SessionInfo
#define soap_read_ns1__SessionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SessionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__SessionInfo * SOAP_FMAC2 soap_instantiate_ns1__SessionInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SessionInfo * soap_new_ns1__SessionInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SessionInfo(soap, n, NULL, NULL, NULL); }

inline ns1__SessionInfo * soap_new_req_ns1__SessionInfo(struct soap *soap, std::string& SessionCode, std::string& PublicKey, ns1__ErrorInfo& Error) { ns1__SessionInfo *_p = soap_instantiate_ns1__SessionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__SessionInfo::SessionCode = SessionCode; _p->ns1__SessionInfo::PublicKey = PublicKey; _p->ns1__SessionInfo::Error = Error; } return _p; }

inline ns1__SessionInfo * soap_new_set_ns1__SessionInfo(struct soap *soap, std::string& SessionCode, std::string& PublicKey, ns1__ErrorInfo& Error) { ns1__SessionInfo *_p = soap_instantiate_ns1__SessionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__SessionInfo::SessionCode = SessionCode; _p->ns1__SessionInfo::PublicKey = PublicKey; _p->ns1__SessionInfo::Error = Error; } return _p; }

inline void soap_delete_ns1__SessionInfo(struct soap *soap, ns1__SessionInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SessionInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__FileInfo
#define SOAP_TYPE_ns1__FileInfo (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FileInfo(struct soap*, const char*, int, const ns1__FileInfo *, const char*);
SOAP_FMAC3 ns1__FileInfo * SOAP_FMAC4 soap_in_ns1__FileInfo(struct soap*, const char*, ns1__FileInfo *, const char*);

#ifndef soap_write_ns1__FileInfo
#define soap_write_ns1__FileInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:FileInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__FileInfo * SOAP_FMAC4 soap_get_ns1__FileInfo(struct soap*, ns1__FileInfo *, const char*, const char*);

#ifndef soap_read_ns1__FileInfo
#define soap_read_ns1__FileInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__FileInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__FileInfo * SOAP_FMAC2 soap_instantiate_ns1__FileInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FileInfo * soap_new_ns1__FileInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__FileInfo(soap, n, NULL, NULL, NULL); }

inline ns1__FileInfo * soap_new_req_ns1__FileInfo(struct soap *soap, std::string& FileName, std::string& FileSize, std::string& FolderName) { ns1__FileInfo *_p = soap_instantiate_ns1__FileInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__FileInfo::FileName = FileName; _p->ns1__FileInfo::FileSize = FileSize; _p->ns1__FileInfo::FolderName = FolderName; } return _p; }

inline ns1__FileInfo * soap_new_set_ns1__FileInfo(struct soap *soap, std::string& FileName, std::string& FileSize, std::string& FolderName) { ns1__FileInfo *_p = soap_instantiate_ns1__FileInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__FileInfo::FileName = FileName; _p->ns1__FileInfo::FileSize = FileSize; _p->ns1__FileInfo::FolderName = FolderName; } return _p; }

inline void soap_delete_ns1__FileInfo(struct soap *soap, ns1__FileInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__FileInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ErrorInfo
#define SOAP_TYPE_ns1__ErrorInfo (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ErrorInfo(struct soap*, const char*, int, const ns1__ErrorInfo *, const char*);
SOAP_FMAC3 ns1__ErrorInfo * SOAP_FMAC4 soap_in_ns1__ErrorInfo(struct soap*, const char*, ns1__ErrorInfo *, const char*);

#ifndef soap_write_ns1__ErrorInfo
#define soap_write_ns1__ErrorInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:ErrorInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ErrorInfo * SOAP_FMAC4 soap_get_ns1__ErrorInfo(struct soap*, ns1__ErrorInfo *, const char*, const char*);

#ifndef soap_read_ns1__ErrorInfo
#define soap_read_ns1__ErrorInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ErrorInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ErrorInfo * SOAP_FMAC2 soap_instantiate_ns1__ErrorInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ErrorInfo * soap_new_ns1__ErrorInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ErrorInfo(soap, n, NULL, NULL, NULL); }

inline ns1__ErrorInfo * soap_new_req_ns1__ErrorInfo(struct soap *soap, std::string& ErrorNumber, std::string& Error, std::string& ErrorType) { ns1__ErrorInfo *_p = soap_instantiate_ns1__ErrorInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ErrorInfo::ErrorNumber = ErrorNumber; _p->ns1__ErrorInfo::Error = Error; _p->ns1__ErrorInfo::ErrorType = ErrorType; } return _p; }

inline ns1__ErrorInfo * soap_new_set_ns1__ErrorInfo(struct soap *soap, std::string& ErrorNumber, std::string& Error, std::string& ErrorType) { ns1__ErrorInfo *_p = soap_instantiate_ns1__ErrorInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ErrorInfo::ErrorNumber = ErrorNumber; _p->ns1__ErrorInfo::Error = Error; _p->ns1__ErrorInfo::ErrorType = ErrorType; } return _p; }

inline void soap_delete_ns1__ErrorInfo(struct soap *soap, ns1__ErrorInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ErrorInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
#endif

#define soap_default_xsd__string(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data),0) || soap_put_xsd__string(soap, data, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__string soap_instantiate_std__string


#define soap_copy_xsd__string soap_copy_std__string

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__EndUpdate
#define SOAP_TYPE_ns__EndUpdate (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__EndUpdate(struct soap*, struct ns__EndUpdate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__EndUpdate(struct soap*, const struct ns__EndUpdate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__EndUpdate(struct soap*, const char*, int, const struct ns__EndUpdate *, const char*);
SOAP_FMAC3 struct ns__EndUpdate * SOAP_FMAC4 soap_in_ns__EndUpdate(struct soap*, const char*, struct ns__EndUpdate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__EndUpdate(struct soap*, const struct ns__EndUpdate *, const char*, const char*);

#ifndef soap_write_ns__EndUpdate
#define soap_write_ns__EndUpdate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__EndUpdate(soap, data),0) || soap_put_ns__EndUpdate(soap, data, "ns:EndUpdate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__EndUpdate * SOAP_FMAC4 soap_get_ns__EndUpdate(struct soap*, struct ns__EndUpdate *, const char*, const char*);

#ifndef soap_read_ns__EndUpdate
#define soap_read_ns__EndUpdate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__EndUpdate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__EndUpdate * SOAP_FMAC2 soap_instantiate_ns__EndUpdate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__EndUpdate * soap_new_ns__EndUpdate(struct soap *soap, int n = -1) { return soap_instantiate_ns__EndUpdate(soap, n, NULL, NULL, NULL); }

inline struct ns__EndUpdate * soap_new_req_ns__EndUpdate(struct soap *soap) { struct ns__EndUpdate *_p = soap_instantiate_ns__EndUpdate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__EndUpdate(soap, _p); } return _p; }

inline struct ns__EndUpdate * soap_new_set_ns__EndUpdate(struct soap *soap, ns1__UpdateArguments *UpdateInfo) { struct ns__EndUpdate *_p = soap_instantiate_ns__EndUpdate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__EndUpdate(soap, _p); _p->UpdateInfo = UpdateInfo; } return _p; }

inline void soap_delete_ns__EndUpdate(struct soap *soap, struct ns__EndUpdate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__EndUpdate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__DoUpdate
#define SOAP_TYPE_ns__DoUpdate (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__DoUpdate(struct soap*, struct ns__DoUpdate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__DoUpdate(struct soap*, const struct ns__DoUpdate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DoUpdate(struct soap*, const char*, int, const struct ns__DoUpdate *, const char*);
SOAP_FMAC3 struct ns__DoUpdate * SOAP_FMAC4 soap_in_ns__DoUpdate(struct soap*, const char*, struct ns__DoUpdate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__DoUpdate(struct soap*, const struct ns__DoUpdate *, const char*, const char*);

#ifndef soap_write_ns__DoUpdate
#define soap_write_ns__DoUpdate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__DoUpdate(soap, data),0) || soap_put_ns__DoUpdate(soap, data, "ns:DoUpdate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__DoUpdate * SOAP_FMAC4 soap_get_ns__DoUpdate(struct soap*, struct ns__DoUpdate *, const char*, const char*);

#ifndef soap_read_ns__DoUpdate
#define soap_read_ns__DoUpdate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__DoUpdate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__DoUpdate * SOAP_FMAC2 soap_instantiate_ns__DoUpdate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__DoUpdate * soap_new_ns__DoUpdate(struct soap *soap, int n = -1) { return soap_instantiate_ns__DoUpdate(soap, n, NULL, NULL, NULL); }

inline struct ns__DoUpdate * soap_new_req_ns__DoUpdate(struct soap *soap) { struct ns__DoUpdate *_p = soap_instantiate_ns__DoUpdate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__DoUpdate(soap, _p); } return _p; }

inline struct ns__DoUpdate * soap_new_set_ns__DoUpdate(struct soap *soap, ns1__UpdateArguments *UpdateInfo) { struct ns__DoUpdate *_p = soap_instantiate_ns__DoUpdate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__DoUpdate(soap, _p); _p->UpdateInfo = UpdateInfo; } return _p; }

inline void soap_delete_ns__DoUpdate(struct soap *soap, struct ns__DoUpdate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DoUpdate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__MakeSecureConnection
#define SOAP_TYPE_ns__MakeSecureConnection (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MakeSecureConnection(struct soap*, struct ns__MakeSecureConnection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MakeSecureConnection(struct soap*, const struct ns__MakeSecureConnection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MakeSecureConnection(struct soap*, const char*, int, const struct ns__MakeSecureConnection *, const char*);
SOAP_FMAC3 struct ns__MakeSecureConnection * SOAP_FMAC4 soap_in_ns__MakeSecureConnection(struct soap*, const char*, struct ns__MakeSecureConnection *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MakeSecureConnection(struct soap*, const struct ns__MakeSecureConnection *, const char*, const char*);

#ifndef soap_write_ns__MakeSecureConnection
#define soap_write_ns__MakeSecureConnection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__MakeSecureConnection(soap, data),0) || soap_put_ns__MakeSecureConnection(soap, data, "ns:MakeSecureConnection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__MakeSecureConnection * SOAP_FMAC4 soap_get_ns__MakeSecureConnection(struct soap*, struct ns__MakeSecureConnection *, const char*, const char*);

#ifndef soap_read_ns__MakeSecureConnection
#define soap_read_ns__MakeSecureConnection(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__MakeSecureConnection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__MakeSecureConnection * SOAP_FMAC2 soap_instantiate_ns__MakeSecureConnection(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__MakeSecureConnection * soap_new_ns__MakeSecureConnection(struct soap *soap, int n = -1) { return soap_instantiate_ns__MakeSecureConnection(soap, n, NULL, NULL, NULL); }

inline struct ns__MakeSecureConnection * soap_new_req_ns__MakeSecureConnection(struct soap *soap) { struct ns__MakeSecureConnection *_p = soap_instantiate_ns__MakeSecureConnection(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__MakeSecureConnection(soap, _p); } return _p; }

inline struct ns__MakeSecureConnection * soap_new_set_ns__MakeSecureConnection(struct soap *soap, ns1__UpdateArguments *UpdateInfo) { struct ns__MakeSecureConnection *_p = soap_instantiate_ns__MakeSecureConnection(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__MakeSecureConnection(soap, _p); _p->UpdateInfo = UpdateInfo; } return _p; }

inline void soap_delete_ns__MakeSecureConnection(struct soap *soap, struct ns__MakeSecureConnection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MakeSecureConnection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__RequestForUpdate
#define SOAP_TYPE_ns__RequestForUpdate (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__RequestForUpdate(struct soap*, struct ns__RequestForUpdate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__RequestForUpdate(struct soap*, const struct ns__RequestForUpdate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RequestForUpdate(struct soap*, const char*, int, const struct ns__RequestForUpdate *, const char*);
SOAP_FMAC3 struct ns__RequestForUpdate * SOAP_FMAC4 soap_in_ns__RequestForUpdate(struct soap*, const char*, struct ns__RequestForUpdate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__RequestForUpdate(struct soap*, const struct ns__RequestForUpdate *, const char*, const char*);

#ifndef soap_write_ns__RequestForUpdate
#define soap_write_ns__RequestForUpdate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__RequestForUpdate(soap, data),0) || soap_put_ns__RequestForUpdate(soap, data, "ns:RequestForUpdate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__RequestForUpdate * SOAP_FMAC4 soap_get_ns__RequestForUpdate(struct soap*, struct ns__RequestForUpdate *, const char*, const char*);

#ifndef soap_read_ns__RequestForUpdate
#define soap_read_ns__RequestForUpdate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__RequestForUpdate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__RequestForUpdate * SOAP_FMAC2 soap_instantiate_ns__RequestForUpdate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__RequestForUpdate * soap_new_ns__RequestForUpdate(struct soap *soap, int n = -1) { return soap_instantiate_ns__RequestForUpdate(soap, n, NULL, NULL, NULL); }

inline struct ns__RequestForUpdate * soap_new_req_ns__RequestForUpdate(struct soap *soap) { struct ns__RequestForUpdate *_p = soap_instantiate_ns__RequestForUpdate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__RequestForUpdate(soap, _p); } return _p; }

inline struct ns__RequestForUpdate * soap_new_set_ns__RequestForUpdate(struct soap *soap) { struct ns__RequestForUpdate *_p = soap_instantiate_ns__RequestForUpdate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__RequestForUpdate(soap, _p); } return _p; }

inline void soap_delete_ns__RequestForUpdate(struct soap *soap, struct ns__RequestForUpdate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RequestForUpdate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons1__UpdateArguments
#define SOAP_TYPE_PointerTons1__UpdateArguments (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UpdateArguments(struct soap*, ns1__UpdateArguments *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UpdateArguments(struct soap*, const char *, int, ns1__UpdateArguments *const*, const char *);
SOAP_FMAC3 ns1__UpdateArguments ** SOAP_FMAC4 soap_in_PointerTons1__UpdateArguments(struct soap*, const char*, ns1__UpdateArguments **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UpdateArguments(struct soap*, ns1__UpdateArguments *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__UpdateArguments
#define soap_write_PointerTons1__UpdateArguments(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__UpdateArguments(soap, data),0) || soap_put_PointerTons1__UpdateArguments(soap, data, "ns1:UpdateArguments", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__UpdateArguments ** SOAP_FMAC4 soap_get_PointerTons1__UpdateArguments(struct soap*, ns1__UpdateArguments **, const char*, const char*);

#ifndef soap_read_PointerTons1__UpdateArguments
#define soap_read_PointerTons1__UpdateArguments(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__UpdateArguments(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__FileList
#define SOAP_TYPE_xsd__FileList (16)
#endif

#define soap_default_xsd__FileList(soap, a) soap_default_std__vectorTemplateOfns1__FileInfo(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__FileList(struct soap*, const std::vector<ns1__FileInfo >*);

#define soap_out_xsd__FileList soap_out_std__vectorTemplateOfns1__FileInfo


#define soap_in_xsd__FileList soap_in_std__vectorTemplateOfns1__FileInfo


#define soap_instantiate_xsd__FileList soap_instantiate_std__vectorTemplateOfns1__FileInfo


#define soap_copy_xsd__FileList soap_copy_std__vectorTemplateOfns1__FileInfo

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__FileInfo
#define SOAP_TYPE_std__vectorTemplateOfns1__FileInfo (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__FileInfo(struct soap*, std::vector<ns1__FileInfo >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__FileInfo(struct soap*, const std::vector<ns1__FileInfo >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__FileInfo(struct soap*, const char*, int, const std::vector<ns1__FileInfo >*, const char*);
SOAP_FMAC3 std::vector<ns1__FileInfo >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__FileInfo(struct soap*, const char*, std::vector<ns1__FileInfo >*, const char*);
SOAP_FMAC1 std::vector<ns1__FileInfo > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__FileInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FileInfo > * soap_new_std__vectorTemplateOfns1__FileInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns1__FileInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns1__FileInfo(struct soap *soap, std::vector<ns1__FileInfo >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns1__FileInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
