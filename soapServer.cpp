/* soapServer.cpp
   Generated by gSOAP 2.8.17r from /mnt/hgfs/APA/Projects/New Project/Update/Server/C++/Update/source.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.17r 2014-06-07 07:43:52 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:RequestForUpdate"))
		return soap_serve_ns__RequestForUpdate(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:MakeSecureConnection"))
		return soap_serve_ns__MakeSecureConnection(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:DoUpdate"))
		return soap_serve_ns__DoUpdate(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:EndUpdate"))
		return soap_serve_ns__EndUpdate(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__RequestForUpdate(struct soap *soap)
{	struct ns__RequestForUpdate soap_tmp_ns__RequestForUpdate;
	ns1__SessionInfo response;
	response.soap_default(soap);
	soap_default_ns__RequestForUpdate(soap, &soap_tmp_ns__RequestForUpdate);
	if (!soap_get_ns__RequestForUpdate(soap, &soap_tmp_ns__RequestForUpdate, "ns:RequestForUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__RequestForUpdate(soap, response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || response.soap_put(soap, "ns1:SessionInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || response.soap_put(soap, "ns1:SessionInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__MakeSecureConnection(struct soap *soap)
{	struct ns__MakeSecureConnection soap_tmp_ns__MakeSecureConnection;
	ns1__UpdateFilesList response;
	response.soap_default(soap);
	soap_default_ns__MakeSecureConnection(soap, &soap_tmp_ns__MakeSecureConnection);
	if (!soap_get_ns__MakeSecureConnection(soap, &soap_tmp_ns__MakeSecureConnection, "ns:MakeSecureConnection", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__MakeSecureConnection(soap, soap_tmp_ns__MakeSecureConnection.UpdateInfo, response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || response.soap_put(soap, "ns1:UpdateFilesList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || response.soap_put(soap, "ns1:UpdateFilesList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__DoUpdate(struct soap *soap)
{	struct ns__DoUpdate soap_tmp_ns__DoUpdate;
	ns1__UpdateResponse response;
	response.soap_default(soap);
	soap_default_ns__DoUpdate(soap, &soap_tmp_ns__DoUpdate);
	if (!soap_get_ns__DoUpdate(soap, &soap_tmp_ns__DoUpdate, "ns:DoUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__DoUpdate(soap, soap_tmp_ns__DoUpdate.UpdateInfo, response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || response.soap_put(soap, "ns1:UpdateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || response.soap_put(soap, "ns1:UpdateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__EndUpdate(struct soap *soap)
{	struct ns__EndUpdate soap_tmp_ns__EndUpdate;
	ns1__ErrorInfo response;
	response.soap_default(soap);
	soap_default_ns__EndUpdate(soap, &soap_tmp_ns__EndUpdate);
	if (!soap_get_ns__EndUpdate(soap, &soap_tmp_ns__EndUpdate, "ns:EndUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__EndUpdate(soap, soap_tmp_ns__EndUpdate.UpdateInfo, response);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || response.soap_put(soap, "ns1:ErrorInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || response.soap_put(soap, "ns1:ErrorInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
